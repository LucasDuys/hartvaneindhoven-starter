generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Activity {
  id              String     @id @default(cuid())
  slug            String     @unique
  name            String
  summary         String?
  durationMinutes Int        @default(60)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  resources       Resource[]
}

model Resource {
  id         String    @id @default(cuid())
  name       String    @unique
  capacity   Int
  activity   Activity  @relation(fields: [activityId], references: [id])
  activityId String
  bookings   Booking[]
}

model AddOn {
  id         String         @id @default(cuid())
  name       String         @unique
  priceCents Int
  perPerson  Boolean        @default(false)
  bookings   BookingAddOn[] // join rows
}

model Booking {
  id              String         @id @default(cuid())
  email           String
  name            String?
  date            DateTime
  size            Int
  durationMinutes Int            @default(60)
  resource        Resource       @relation(fields: [resourceId], references: [id])
  resourceId      String
  addOns          BookingAddOn[] // join rows
  status          BookingStatus  @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model BookingAddOn {
  bookingId String
  addOnId   String

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  addOn   AddOn   @relation(fields: [addOnId], references: [id], onDelete: Cascade)

  @@id([bookingId, addOnId])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

